<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>#register &lt;d:\folder1\blocks.dll&gt;
#token AA BB 
#define cmd1 txt.Command1(); 
#include &lt;otherFile.xda&gt;
#define cmd2(x,y) x.Command1(y);

#block B1: BaseBlock
{
	connector c1;
	service service1(x,y) 
	{
		b1.Process1(x);
		!b2.Connector1 = y;
		return "a";
		b3.Process2(y);
	}
}


blockWeb idweb1 [X,Y] : abstract , remotable
{
	block button: BWeb1.SpecialButton [Z];
	block testBlock: ProcessBlock (myProduct, 1.2.0.5);
	block txt: TextBox remotable [T]
	{
		!Text = "Hello" [create];
		!Index = 12;
		!Tag = null;
		!IsAvailable = false;
		!SizeList = {System.String[], 1:2:3};
		var x = 12;
		if ( CanHandle(x, "Hi") )
		{
		}
		else
		{
		}		
	}

	while ( bitton.IsValid() )
	{
		//command list
	}
	do
	{
		//command list
	} while ( ~button.IsValid() );

	[cmd1()];		
	[cmd2(button, txt)];

	var t = [uid];
	var n = null;
	
	button.SetValues(t, n, "AA");
	!coordinator.ProcessRequest [B] = &amp;txt.Update; 
	!coordinator.AddBlock [A] = !txt.ProcessAfterAddBlock;
}</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAIACoEAAAJgAAABAQAAABACAAaAQAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAAAAAQ
        AAASCwAAEgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABIAAAASAAAACQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABYAAAApAAAAOwAAADsAAAApAAAAFgAAAAkAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABYAAAAoAAAAPABZMIoAiEf8AIZG/ABXLooAAAA8AAAAKAAA
        ABYAAAAJAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABYAAAAoAAAAPABZL4kAi0v4AKp1/wDFm/9//9b/NsaM/wCK
        S/gAViyJAAAAPAAAACgAAAAWAAAACQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABYAAAAoAAAAPABZLokAkFL4ALOB/wDHnf8AyJ//AMKZ/5D/
        2/9w/9H/a/zM/0XVnv8GklT4AFUriQAAADwAAAAoAAAAFgAAAAkAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABYAAAAoAAAAPABYLYkAlFb4ALKA/wDKo/8AyJ//AMed/wDF
        m/8AwJb/lf7Z/2X6yP9q/Mv/bv/Q/3T/1v9E1J3/D5xf+ABUKokAAAA8AAAAKAAAABYAAAAJAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABYAAAAoAAAAPABXLIkAmF/4ALqK/2viyv8Ax53/AMad/wDF
        nP8AxZv/AMSa/wDAlf+g/dz/WvTC/2D2xf9j+Mf/aPvK/23/zv9x/9T/UuSx/xalaPgAUymJAAAAPAAA
        ACgAAAAWAAAACQAAAAIAAAAAAAAAAAAAAAoAAAAkAAAAPQBWK4oAomz4AL6S/wDJof8Axpv/bN7G/wDE
        mf8AxZv/AMWb/wDFm/8Aw5r/AL+V/6r74P9Q8b7/V/LB/1rzwv9d9MP/YPfG/2H5yP+q/+P/bf/R/1vs
        uf8quH74AFIoigAAAD0AAAAkAAAACgAAAAAAAAAAAAAAEwBkNYUAo276AMKY/wDJoP8Ax57/AMac/wDE
        mP9y38X/AMKY/wDEmv8Aw5v/AMOb/wDCmf8AvZT/tvvj/0btu/9O7r7/Uu+//1XxwP9X8sH/VfPA/6P6
        3P9d+MX/ZfvL/23/0P9j9cP/K7qA+gBhM4UAAAATAAAAAAAAAAAAAAAWAIpI/wDNpv8Axp7/AMWc/wDE
        m/8Aw5r/AMGY/3ffyf8AwZj/AMGa/wDBmv8AwJn/AL6X/wnBn//Q/O//Pei2/0XpuP9K7Lr/Te29/0/u
        vv9M773/offb/1Pyv/9Z88L/X/bF/2X7y/9w/9f/AIZE/wAAABYAAAAAAAAAAAAAABYAikf/AMmj/wDE
        nf8Aw5v/AMKb/wDCmv8AwJj/e9/K/wC+lv8Avpj/AL2X/yXKrP9n5Mj/YuzE/17rw/9579D/W+rD/0Dn
        tv9D6bj/Ruq5/0XsuP+g9tv/Su28/1Hvv/9V8cD/WvTD/2T+z/8AhUP/AAAAFgAAAAAAAAAAAAAAFgCK
        R/8Ax6P/AMOc/wDBm/8AwZv/AMCa/wC9lv993cr/ALqU/y3Or/986tD/Veu//wjdnP8A2pX/ANmU/wXb
        m/9P57z/hO/U/1vrw/875rX/Oue1/5/02v9A6bf/Suy6/03tvf9S8MD/W/nL/wCFQ/8AAAAWAAAAAAAA
        AAAAAAAWAIpH/wDFo/8AwJz/AMCa/wC/mf8AvZj/ALyY/6bs3f9n6cj/P+e1/wjdnP8A2pb/ANuX/wDb
        mP8A25j/ANqX/wDalf8G25v/PeW1/3PuzP9d68L/oPPb/zXls/8/6Lb/ROm4/0nsvP9T9sb/AIVE/wAA
        ABYAAAAAAAAAAAAAABYAikf/AMSi/wC/m/8AvZj/CcCf/0DQt/9m2sn/y//s/wbfnf8A2JL/ANmV/wDa
        l/8A25j/ANuZ/wDbmf8A25n/ANuY/wDcl/8A3Jb/ANiY/zXWsv/N+/D/ZOvI/0Hlt/855bT/Pui3/0nx
        w/8AhkT/AAAAFgAAAAAAAAAAAAAAFgCJRv8AwaD/CcGf/1XWwf984NH/LMmw/wC0k/+9/ub/XPbD/0rw
        u/8i5an/ANiU/wDZlv8A25j/ANuZ/wDdmf8A3pn/ANSa/wDJm/8AwZn/AL6T/6Hx2v9O5bz/kfHa/3fu
        0P9A5rj/POy8/wCFQ/8AAAAWAAAAAAAAAAAAAAAWDZJT/2Hezv9p28v/Jcat/wC6mP8AuZn/ALSV/7v7
        5f9I7br/VvHB/2D0xf9a9ML/Mumw/wDcmf8A25f/ANCa/wDFm/8AwZv/AMKb/wDBmv8AvZX/pvLb/xza
        p/8i26n/S+O7/4Tv1f+F99z/CI5R/wAAABYAAAAAAAAAAAAAABYAiUX/F8at/wC6mv8AuJr/ALmb/wC5
        mv8AtJb/t/nj/zjntP9F6rn/Tey9/1TwwP9d88P/a/rK/wrBnv8AwJr/AMGb/wDBm/8AwZv/AL+a/wC6
        lv+o8dz/F9al/x/YqP8i26n/JNyr/0Hov/8Bi0v/AAAAFgAAAAAAAAAAAAAAFgCKRv8AvqP/ALmc/wC5
        m/8Aupv/ALma/wCzlv+29uL/K+Cu/zfktP8/5rb/ROm4/0zsvP9W88D/I8ap/wC+mf8AwJv/AL+b/wC/
        m/8AvZr/ALiW/6nv3f8P06H/Gdal/x3Xp/8h2ar/JeGz/wCHRf8AAAAWAAAAAAAAAAAAAAAWAItG/wC9
        o/8Aupr/ALuX/wOyn/8AuZf/ALOU/7P24P8d2qj/K96t/zLgsP8347P/PeW1/0Xruv89zLH/ALyY/wC+
        m/8AvZv/ALyc/wC7m/8Atpf/q/Dd/wbPnv8S0qL/FtOk/xrWp/8e3q//AIdG/wAAABYAAAABAAAABwAA
        ACAAjD//AL2d/wqpo/8sh7//PXbO/yqGvv8ApJ7/s/fc/xDWoP8d2ab/Jdur/yvdrf8w4LD/NuWy/1jQ
        vf8Aupn/ALyc/wC7nP8Aupz/ALia/wCzlv+r79z/AMqZ/wnPnv8O0KD/EdKk/xfZrP8AiEb/AAAAFgAA
        AAgAAAAeAAAAOweIWf8siML/Sp/j/1TW///A8f//U9X//0Wc4P9Vkcz/Ebyk/w3Wnf8W2KL/Hdin/yPa
        qv8l3qr/cdfH/wC3mP8AuJv/ALib/wC1mf8As5f/E7ul/7nx5P8AxZP/AMmZ/wTLm/8Izp//Ddan/wCI
        R/8AAAAWAAAAEiBHb2M2c7vaSKLj/1jW//9W3v//Stf//73t//9N2v//Vt7//1bU//9HnOH/Loq+/xS8
        pv8M057/EtSi/xTWpP+L3NH/ALOX/wC0mP8Aspf/NMSz/5Li2/+E7tT/kvPZ/47q2P8l0av/AMWU/wDJ
        mf8B0KP/AIhG/wAAABYAAAAWOn/I/1XZ//9T3f//TtX//0fQ//87yf//wvD//0fS//9P1///U9r//1be
        //9X1v//PHLN/0bft/8Ay5j/AM2Z/6Pi2/8ArZP/P8e4/63u5v937c7/DN+e/wDak/8A2ZP/JeGp/5Hy
        2P+Q69n/JdOs/wDMnf8Ah0T/AAAAFAAAABY6fsf/Stj//0bO//9Byf//O8X//y+////I8///Qc///0rS
        //9N0///UNb//1Pe//85c8n/VvG8/5fw2/9W38D/UMy//5Xq2/9Y6sD/C96e/wDalP8A25f/ANuY/wDb
        l/8A2pb/ANqT/yDiqf+L9dn/kPTk/w+UV/8AAAAMAAAAFjt+x/8+zf//OsT//zbA//8xvP//IrX//874
        //88yv//Rc3//0nP//9K0///Ttn//zhzyf8B5Jb/XuzC/7357f+9+u3/X+vD/wTcm/8A2ZP/ANqW/wDb
        mP8A25n/ANuZ/wDcmP8A3pz/Q+u5/4Hkw/9Jt4r/DY5UjgAAAAMAAAAWPH/H/zPD//8uu///Kbb//yOy
        //8Tqf//0/z//zXF//8/yP//Q8z//0bO//9I1P//OXPJ/6v/4P8+5rX/ANmR/wDZkf8+5LX/q/bk/3bu
        zf8M3Z//ANuV/wDdmP8H4qH/TOa4/1zLof9Cq3zRAHs7XwAAAAIAAAAAAAAAAAAAABY8gMf/JLj//x+v
        //8Yq///Eqj//y2u/f/Y/v//Ssb9/zPD//85xv//Psn//0PP//89dMr/AOKQ/wDclv8A25f/ANuX/wDa
        lv8A2pT/MuWx/4/23P+J9tz/Rdeo/068j/8plmKrAHU6IQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAFDp/
        xv8Urv//HKz//2HH//+67v7/oOz+/2zh//+h7f7/v/H+/3XZ//87xf//OMr//z11zf8A5pX/AOCb/wDd
        m/8A3Zv/AN6c/wDgnP8D1JP/Jr2G/0ywg/Ygkl9yAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAMS43O/4fg//++9v//fuH//0nQ//9Dz///R9H//0rT//9S2P//iOn//8X7//+a7///TofX/xqm
        YP8IxYT/AN6b/wDem/8IxYT/HKRq/ySVX70Mh05LAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAM2fMOgVang/zS39f83y///PMv//0DM//9Dzf//RtD//0fT//9J2P//RMT1/1mp
        4f9JhdOqAAAABhSMU4QHjE7/BYpN/w+LUpgIbz8NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACNnm9czqHzfY7qer/O8f//zzN//8+yf//P6zq/zuH
        zfU2eL+FLGSfDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATZ2uEs6fcTTO3/H/zp9
        xNI3eb5fAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/8D///8AP//8AA//8AAD/8AAAP8AAAA8AA
        AADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAADAAAADwAAAH8AAAH/AAAP/8AH///wH///KAAAABAAAAAgAAAAAQAgAAAA
        AAAABAAAEgsAABILAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAMgAA
        ADIAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAj08AAI9PAACPTwAAj08AAI9PAAAAAA4AAAAxAGY3egCI
        R/wAjEz8AGQ1egAAADEAAAAOAI9PAACPTwAAj08AAI9PAACPTwAAj08AAAAACgAAACkAWzBqAIhG+ACh
        af8AwJb/uP/n/yK1ef8Ag0H4AFkvagAAACkAAAAKAI9PAACPTwAAj08AAAAAKwBNKVsAg0PXAKFo/wDC
        mP8AyKD/AMKY/7//6/9n/8//YvbE/yK0ef8Afj/XAEwoWwAAACsAj08AAI9PAACHSOAAo2v/AMKX/27h
        yv8AxZv/AMSa/wC9lf+//Oj/TvG//1f3xf+s/+b/XfTB/yW2fP8AhUbgAI9PAACOTgAAikj/AMql/wDE
        m/913sn/AL+X/wC9l/8BwJz/xPrp/0rru/9B67j/oPfc/1L0w/9m/9P/AIZF/wCPTQAAjkwAAIpH/wDG
        ov8Avpj/fN3K/wC+l/9J2bv/Ze3F/xXfo/9w7cv/bu3K/5/z2v886bf/UPbG/wCFRP8AkEIAAI9EAACK
        Qv8AwqD/ALmV/57m2v+E9dT/J+Oq/wDak/8A25X/ANuT/yHZqf/R+/L/VunC/zrsvP8AhUP/QoTaAAAA
        AAQAizb/Bsei/17cxf+y7OL/Ruy6/0ruu/8n56r/AM+Y/wDCmf8AupP/pPDb/1znxP+G9d7/CY9R/wAA
        ABsSJj5DLX6x/zt90v8lf77/hs/P/x3fpP805LH/S+28/wC7mf8AvJn/ALaW/67x3/8D0Zz/Jd6y/wKL
        S/8xbaudRqbg/07V///D9P//TtP//0Oc4f8knrf/E9Gj/yPcqf8AtZn/ALWa/w23o//t/v//XOHE/wDS
        ov8AhkP/On/H/0XX//8xxf//yPb//0LR//9P3P//O3XL/wS9of8T06L/Ebqk/wDDl/8A15T/ANiS/1vn
        w/+i9er/EZNX/zh9x/8huv//Mrf//9X8//9Pz///PdD//zd1yf9d1cf/pPng/6X34f9c7cL/ANyU/wDe
        mP8A4Zz/Ed6i/wePUf9KjM7/nen//6zy//9l3v//sPX//630//9MhNX/R9LB/wDelP8A3JX/Xe7G/6P7
        6P8SzpH/AKNh/wCIR9AAjEw3N4DJhlOl3/81wv7/Oc3//z7J//9ap+X/JIeO/wC+c/8A35r/AN6a/wC6
        dv8RnWL/D5JVpwCKSgkAjU0AAI9PADqDywA5gckdOX/I+zl+x/85f8n6PoDVGACNPAAAikeAAIlI/wCI
        SP8AikmBAItKABKXXAAAjk0AAI9PAACPTwD+HwAA+AcAAOABAADAAAAAwAAAAMAAAADAAAAAwAAAAIAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAACCHwAA
</value>
  </data>
</root>